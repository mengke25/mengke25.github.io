---
title: "ggplot绘图指南"
author: "Mengke"
format: html
editor: visual
---

## 1.ggplot简介

ggplot2 是 R 中非常强大的数据可视化工具，能够创建多种类型的图形。

`ggplot2` 图形的基本构建块包括

-   数据（data）

-   映射（aesthetics，简称 `aes`）

-   几何对象（geometries，简称 `geom`）

-   统计变换（statistics，简称 `stat`）

-   坐标系统（coordinates，简称 `coord`）

-   主题（themes）

## 2.绘图逻辑

-   第一步：初始化ggplot对象

    -   使用 `ggplot()` 函数初始化 ggplot 对象，指定数据集和美学映射（变量如何映射到图形属性，如 x 轴、y 轴、颜色等）

        ``` txt
        ggplot(data = <dataframe>, aes(x = <x-variable>, y = <y-variable>))
        ```

-   第二步：添加几何对象

    -   使用 `geom_` 系列函数添加几何对象，如点、线、条形、箱线图等

        ``` txt
        + geom_point()
        ```

-   第三步：添加其他组件

    -   例如，添加标题、标签、坐标系、主题等

        ``` txt
        + labs(title = "Title", x = "X-axis Label", y = "Y-axis Label")
        + theme_minimal()
        ```

## 3.绘图实例

加载程辑包

```{r}
library(ggplot2)
library(dplyr)
```

定义颜色

```{r}
my_colors <- c(
  rgb(31, 119, 180, maxColorValue = 255),
  rgb(255, 127, 14, maxColorValue = 255),
  rgb(44, 160, 44, maxColorValue = 255),
  rgb(214, 39, 40, maxColorValue = 255),
  rgb(148, 103, 189, maxColorValue = 255),
  rgb(140, 86, 75, maxColorValue = 255),
  rgb(227, 119, 194, maxColorValue = 255),
  rgb(127, 127, 127, maxColorValue = 255),
  rgb(188, 189, 34, maxColorValue = 255),
  rgb(23, 190, 207, maxColorValue = 255),
  rgb(174, 199, 232, maxColorValue = 255),
  rgb(255, 187, 120, maxColorValue = 255),
  rgb(152, 223, 138, maxColorValue = 255),
  rgb(255, 152, 150, maxColorValue = 255),
  rgb(197, 176, 213, maxColorValue = 255)
)
```

### (1)散点图{geom_point()}

#### a.基本范式

```{r}
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point(color = my_colors[1]) + 
  theme_bw()
```

-   在该图中，有三个关键要素：数据集是`mtcars`，横轴是`wt`，纵轴是`mpg`

-   选择了自定义主题中的第一个颜色 `my_colors[1]`

-   使用了白色学术模板`theme_bw()`

#### b.分组绘制

-   根据vs变量将散点图绘制成两组，只需在`aes()`选项内假如`color=`选项

```{R}
ggplot(mtcars, aes(x = wt, y = mpg , color = factor(vs))) +
  geom_point() + 
  scale_color_manual(values = my_colors) +
  theme_bw() 
```

-   要改变`ggplot2`中`legend`的`title`，可以使用`labs()`函数来设置自定义的legend标题

-   要在`ggplot2`中将legend的labels从默认的`0`和`1`改为自定义的`"type a"`和`"type b"`，可以使用`scale_color_manual()`函数的`labels`参数

```{R}
ggplot(mtcars, aes(x = wt, y = mpg, color = factor(vs))) +
  geom_point() + 
  scale_color_manual(values = my_colors, labels = c("color a", "color b")) +
  theme_bw() +
  labs(color = "type")
```

#### c.加拟合线

-   只需要在已经画好的散点图基础上，加入 `geom_smooth(method = "lm")`

```{r}
ggplot(mtcars, aes(x = wt, y = mpg, color = factor(vs))) +
  geom_point() + 
  scale_color_manual(values = my_colors, labels = c("color a", "color b")) +
  theme_bw() +
  labs(color = "type")+
  geom_smooth(method = "lm") 
```

-   要让置信区间的颜色也与`my_colors`一致，可以使用`geom_smooth()`中的`aes()`函数，并将`fill`属性设置为与颜色一致

-   `label`与之前类似，用`labels`选项即可定义`label1` 和`label2` 的名字

```{r}
ggplot(mtcars, aes(x = wt, y = mpg, color = factor(vs))) +
  geom_point() + 
  scale_color_manual(values = my_colors, labels = c("color a", "color b")) +
  scale_fill_manual(values = my_colors, labels = c("fill a", "fill b")) +  
  theme_bw() +
  labs(color = "type") +
  geom_smooth(method = "lm", aes(fill = factor(vs)), alpha = 0.2) 
```

-   如果不想展示某一类`legend`，只需在最后添加`guides(fill = "none")`选项

```{r}
ggplot(mtcars, aes(x = wt, y = mpg, color = factor(vs))) +
  geom_point() + 
  scale_color_manual(values = my_colors, labels = c("color a", "color b")) +
  scale_fill_manual(values = my_colors, labels = c("fill a", "fill b")) +  
  theme_bw() +
  labs(fill = "type") +
  geom_smooth(method = "lm", aes(fill = factor(vs)), alpha = 0.2) +
  guides(color = "none")
```

#### d.坐标与标题

-   要在现有的代码基础上添加坐标轴标签和图表标题，可以使用`labs()`函数

-   在这段代码中，`labs()`函数被扩展以包括`x = "x"`，`y = "y"`和`title = "title"`，从而设置横坐标、纵坐标的标签和图表标题

```{r}
ggplot(mtcars, aes(x = wt, y = mpg, color = factor(vs))) +
  geom_point() + 
  scale_color_manual(values = my_colors, labels = c("color a", "color b")) +
  scale_fill_manual(values = my_colors, labels = c("fill a", "fill b")) +  
  theme_bw() +
  labs(x = "x", y = "y", title = "title", fill = "type") +
  geom_smooth(method = "lm", aes(fill = factor(vs)), alpha = 0.2) +
  guides(color = "none")
```

-   要更改x轴的刻度，使其从0开始，间隔为2，到达6，可以使用`scale_x_continuous()`函数并设置`breaks`参数

-   要更改y轴的刻度，使其从10到40，间隔为10，可以使用`scale_y_continuous()`函数并设置`limits`和`breaks`参数

```{r}
ggplot(mtcars, aes(x = wt, y = mpg, color = factor(vs))) +
  geom_point() + 
  scale_color_manual(values = my_colors, labels = c("color a", "color b")) +
  scale_fill_manual(values = my_colors, labels = c("fill a", "fill b")) + 
  theme_bw() +
  labs(x = "x", y = "y", title = "title", fill = "type") +
  geom_smooth(method = "lm", aes(fill = factor(vs)), alpha = 0.2) +
  guides(color = "none") +
  scale_x_continuous(breaks = seq(0, 6, by = 2)) +
  scale_y_continuous(limits = c(10, 40), breaks = seq(10, 40, by = 10)) 
```

### (2)线图{geom_line()}

#### a.基本范式

```{r}
ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line(color = my_colors[1]) + 
  theme_bw()
```

#### b.根据横轴分组

-   要根据日期将数据分成两部分并分别应用不同的颜色，可以使用 `dplyr` 包来创建一个新的变量，表示不同时间段，然后在 `ggplot2` 中使用该变量进行颜色映射

-   这种比较少见

```{r}
economics <- economics %>%
  mutate(period = ifelse(date < as.Date("1990-01-01"), "before_1990", "after_1990"))

# 画图
ggplot(economics, aes(x = date, y = unemploy, color = period)) +
  geom_line() +
  scale_color_manual(values = c("before_1990" = my_colors[1], "after_1990" = my_colors[2])) +
  theme_bw() +
  labs(color = "Period")
```

#### c.根据纵轴分组

-   可以使用 `ggplot2` 的 `geom_line()` 函数在同一个 `ggplot` 对象中添加两个数据系列

```{r}
ggplot(economics, aes(x = date)) +
  geom_line(aes(y = psavert, color = "psavert")) +
  geom_line(aes(y = uempmed, color = "uempmed")) +
  scale_color_manual(values = c("psavert" = my_colors[1], 
                                "uempmed" = my_colors[2])) +
  theme_bw()
```

-   要在同一个图中将一个变量绘制在左轴上，另一个变量绘制在右轴上，可以使用 `ggplot2` 中的 `sec_axis()` 功能来创建第二个y轴。

    -   计算 `uempmed` 的缩放因子，以便与 `psavert` 的尺度匹配

    -   使用 `geom_line(aes(y = uempmed * scale_factor, color = "uempmed"))` 绘制缩放后的 `uempmed` 数据，使其与 `psavert` 的尺度匹配

    -   使用 `scale_y_continuous()` 设置左侧 y 轴和右侧 y 轴。`sec_axis(~./scale_factor, name = "uempmed")` 用于创建右侧 y 轴，并恢复 `uempmed` 的原始缩放

```{r}
scale_factor <- max(economics$psavert) / max(economics$uempmed)

ggplot(economics, aes(x = date)) +
  geom_line(aes(y = psavert, color = "psavert")) +
  geom_line(aes(y = uempmed * scale_factor, color = "uempmed")) + 
  scale_color_manual(values = c("psavert" = my_colors[1], 
                                "uempmed" = my_colors[2])) +
  scale_y_continuous(
    name = "psavert",
    sec.axis = sec_axis(~./scale_factor, name = "uempmed")) +
  theme_bw() 
```
